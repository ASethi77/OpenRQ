<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Copyright 2014 Jose Lopes

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="functional-ant">
    <description>
        Ant build file for building self-contained JUnit Jar.
        This script is intended to be imported from a top-level script.
    </description>

    <!-- 
        When this file is imported the basedir property is ignored,
        so this hack is required to retrieve it.
    -->
    <dirname property="functional-ant.basedir" file="${ant.file.functional-ant}"/>

    <property name="junit-core.jar" location="${functional-ant.basedir}/junit-4.11.jar"/>
    <property name="hamcrest-core.jar" location="${functional-ant.basedir}/hamcrest-core-1.3.jar"/>

    <!-- private target to be overriden in importing script -->
    <target name="-init-functional-properties">
    
        <echo>The following properties may or must be defined ([&lt;prop&gt;] means optional):
    	func.src_dir        : path to the source files to be compiled along with the functional testing tool
    	func.bin_dir        : path to the location of the compiled files
    	func.jar_file       : path to the resulting self-contained executable Jar
        [func.extrabin_dir] : extra directory containing class files to be included in the build
        </echo>
        <fail message="Must define functional test properties.">
            <condition>
                <not>
                    <and>
                        <isset property="func.src_dir"/>
                        <isset property="func.bin_dir"/>
                        <isset property="func.jar_file"/>
                    </and>
                </not>
            </condition>
        </fail>
        
    </target>
    

    <!-- private target to be called by importing script -->
    <target name="-functional-jar" depends="-init-functional-properties,-simple-func-jar,-extra-func-jar"/>

    <target name="-compile-with-junit">
        
        <delete dir="${func.bin_dir}"/>
        <mkdir dir="${func.bin_dir}"/>
        
        <javac srcdir="${func.src_dir}" destdir="${func.bin_dir}"
               classpath="${junit-core.jar}:${hamcrest-core.jar}:${func.extrabin_dir}"
               includeAntRuntime="false"/>
               
    </target>

    <target name="-simple-func-jar" depends="-compile-with-junit" unless="func.extrabin_dir">
        
        <delete file="${func.jar_file}"/>
        <jar jarfile="${func.jar_file}" basedir="${func.bin_dir}">
            <manifest>
                <attribute name="Main-Class" value="org.junit.runner.JUnitCore"/>
            </manifest>
            
            <zipfileset src="${junit-core.jar}" />
            <zipfileset src="${hamcrest-core.jar}" />
        </jar>
        
    </target>

    <target name="-extra-func-jar" depends="-compile-with-junit" if="func.extrabin_dir">
    
        <delete file="${func.jar_file}"/>
        <jar jarfile="${func.jar_file}" basedir="${func.bin_dir}">
            <fileset dir="${func.extrabin_dir}"/>
            
            <manifest>
                <attribute name="Main-Class" value="org.junit.runner.JUnitCore"/>
            </manifest>
            
            <zipfileset src="${junit-core.jar}" />
            <zipfileset src="${hamcrest-core.jar}" />
        </jar>
    
    </target>
    
</project>
